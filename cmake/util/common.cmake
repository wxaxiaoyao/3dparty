# 定义库变量
macro(define_external_lib_variable lib_name)
    set(LIB_NAME ${lib_name})
    string(TOUPPER "${LIB_NAME}" LIB_NAME_UPPER)
    string(TOLOWER "${LIB_NAME}" LIB_NAME_LOWER)
    if (DEFINED ${LIB_NAME}_DIRNAME)
        set(${LIB_NAME_UPPER}_DIRNAME ${${LIB_NAME}_DIRNAME})
    else()
        set(${LIB_NAME_UPPER}_DIRNAME ${LIB_NAME})
    endif()
    if (DEFINED ${LIB_NAME}_INTERFACE_NAME)
        set(${LIB_NAME_UPPER}_DIRNAME ${${LIB_NAME}_INTERFACE_NAME})
    else()
        set(${LIB_NAME_UPPER}_INTERFACE_NAME ${LIB_NAME_LOWER}_interface)
    endif()
    if (DEFINED ${LIB_NAME}_INSTALL_DIRECTORY)
        set(${LIB_NAME_UPPER}_INSTALL_DIRECTORY ${${LIB_NAME}_INSTALL_DIRECTORY})
    else()
        set(${LIB_NAME_UPPER}_INSTALL_DIRECTORY ${EXTERNAL_LIB_INSTALL_DIRECTORY}/${${LIB_NAME_UPPER}_DIRNAME})
    endif()
    if (DEFINED ${LIB_NAME}_CMAKE_DIR)
        set(${LIB_NAME_UPPER}_CMAKE_DIR ${${LIB_NAME}_CMAKE_DIR})
    else()
        set(${LIB_NAME_UPPER}_CMAKE_DIR ${EXTERNAL_LIB_SOURCE_DIRECTORY}/${${LIB_NAME_UPPER}_DIRNAME})
    endif()
    if (DEFINED ${LIB_NAME}_SOURCE_DIR)
        set(${LIB_NAME_UPPER}_SOURCE_DIR ${${LIB_NAME}_SOURCE_DIR})
    else()
        set(${LIB_NAME_UPPER}_SOURCE_DIR ${EXTERNAL_LIB_SOURCE_DIRECTORY}/${${LIB_NAME_UPPER}_DIRNAME})
    endif()
    if (DEFINED ${LIB_NAME}_BUILD_DIR)
        set(${LIB_NAME_UPPER}_BUILD_DIR ${${LIB_NAME}_BUILD_DIR})
    else()
        set(${LIB_NAME_UPPER}_BUILD_DIR ${EXTERNAL_LIB_BUILD_DIRECTORY}/${${LIB_NAME_UPPER}_DIRNAME})
    endif()
    if (DEFINED ${LIB_NAME}_BUILD_TYPE)
        set(${LIB_NAME_UPPER}_BUILD_TYPE ${${LIB_NAME}_BUILD_TYPE})
    else()
        set(${LIB_NAME_UPPER}_BUILD_TYPE ${EXTERNAL_LIB_BUILD_TYPE})
    endif()
    set(${LIB_NAME_UPPER}_CONFIG ${${LIB_NAME}_CONFIG})
    if (DEFINED ${LIB_NAME}_INTERFACE_INCLUDE_DIR)
        list(APPEND ${LIB_NAME_UPPER}_INTERFACE_INCLUDE_DIR ${${LIB_NAME}_INTERFACE_INCLUDE_DIR})
    endif()
    list(APPEND ${LIB_NAME_UPPER}_INTERFACE_INCLUDE_DIR ${${LIB_NAME_UPPER}_INSTALL_DIRECTORY}/include)
    # 指定动态库真实名称
    if (DEFINED ${LIB_NAME}_INTERFACE_LIBRARY_NAME)
        set(${LIB_NAME_UPPER}_INTERFACE_LIBRARY_NAME ${${LIB_NAME}_INTERFACE_LIBRARY_NAME})
    else()
        set(${LIB_NAME_UPPER}_INTERFACE_LIBRARY_NAME ${LIB_NAME})
    endif()
    if (DEFINED ${LIB_NAME}_INTERFACE_LIBRARY)
        set(${LIB_NAME_UPPER}_INTERFACE_LIBRARY ${${LIB_NAME}_INTERFACE_LIBRARY})
    else()
        if ("${${LIB_NAME_UPPER}_INTERFACE_LIBRARY_NAME}" STREQUAL "")
            # message("LibName Not Exist")
        else()
            set(${LIB_NAME_UPPER}_INTERFACE_LIBRARY ${${LIB_NAME_UPPER}_INSTALL_DIRECTORY}/lib/${STATIC_LIB_PREFIX}${${LIB_NAME_UPPER}_INTERFACE_LIBRARY_NAME}${STATIC_LIB_SUFFIX})
        endif()
    endif()
    if (DEFINED ${LIB_NAME}_INTERFACE_MACRO_DEFINITIONS)
        list(APPEND ${LIB_NAME_UPPER}_INTERFACE_MACRO_DEFINITIONS ${${LIB_NAME}_INTERFACE_MACRO_DEFINITIONS})
    endif()
    list(APPEND ${LIB_NAME_UPPER}_INTERFACE_MACRO_DEFINITIONS USE_${LIB_NAME_UPPER})
    set(${LIB_NAME_UPPER}_BUILD_CONFIG ${${LIB_NAME}_CONFIG})

    if (DEFINED ${LIB_NAME}_AUTO_BUILD)
        set(${LIB_NAME_UPPER}_AUTO_BUILD ${${LIB_NAME}_AUTO_BUILD})
    else()
        set(${LIB_NAME_UPPER}_AUTO_BUILD TRUE)
    endif()

    set(${LIB_NAME_UPPER}_INSTALL_DIRECTORY_FOUND FALSE)
endmacro(define_external_lib_variable)



# 打印库变量
macro(print_external_lib_variable lib_name)
    set(LIB_NAME ${lib_name})
    message("Lib Name: " ${LIB_NAME})
    message("Lib Library Name: " ${${LIB_NAME_UPPER}_INTERFACE_LIBRARY_NAME})
    message("Lib Directory Name: " ${${LIB_NAME_UPPER}_DIRNAME})
    message("Install Directory: " ${${LIB_NAME_UPPER}_INSTALL_DIRECTORY})
    message("Source Directory: " ${${LIB_NAME_UPPER}_SOURCE_DIR})
    message("Build Directory: " ${${LIB_NAME_UPPER}_BUILD_DIR})
    message("Cmake Directory: " ${${LIB_NAME_UPPER}_CMAKE_DIR})
    message("Cmake Config: " ${${LIB_NAME_UPPER}_BUILD_CONFIG})
    message("Lib Interface Name: " ${${LIB_NAME_UPPER}_INTERFACE_NAME})
    message("Include Directory: " ${${LIB_NAME_UPPER}_INTERFACE_INCLUDE_DIR})
    message("Library Path: " ${${LIB_NAME_UPPER}_INTERFACE_LIBRARY})
    message("Library Macro Definitions: " ${${LIB_NAME_UPPER}_INTERFACE_MACRO_DEFINITIONS})
    message("Install Directory Found: " ${${LIB_NAME_UPPER}_INSTALL_DIRECTORY_FOUND})
    endmacro(print_external_lib_variable)

macro(build_external_lib_only_header lib_name)
    message("\n=========================BUILD LIB BEGIN=========================")
    define_external_lib_variable(${lib_name})
    # execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${${LIB_NAME_UPPER}_INTERFACE_INCLUDE_DIR})
    # execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory ${${LIB_NAME_UPPER}_SOURCE_DIR} ${${LIB_NAME_UPPER}_INTERFACE_INCLUDE_DIR})
    
    add_library(${${LIB_NAME_UPPER}_INTERFACE_NAME} INTERFACE)
    target_include_directories(${${LIB_NAME_UPPER}_INTERFACE_NAME} INTERFACE ${${LIB_NAME_UPPER}_INTERFACE_INCLUDE_DIR})
    target_compile_definitions(${${LIB_NAME_UPPER}_INTERFACE_NAME} INTERFACE ${${LIB_NAME_UPPER}_INTERFACE_MACRO_DEFINITIONS})
    message("Lib Library Name: " ${${LIB_NAME_UPPER}_INTERFACE_LIBRARY_NAME})
    message("Include Directory: " ${${LIB_NAME_UPPER}_INTERFACE_INCLUDE_DIR})
    message("Library Macro Definitions: " ${${LIB_NAME_UPPER}_INTERFACE_MACRO_DEFINITIONS})
    message("=========================BUILD LIB END=========================")
endmacro(build_external_lib_only_header)

# 查找库
macro(find_install_directory)
    if (EXISTS ${${LIB_NAME_UPPER}_INSTALL_DIRECTORY})
        set(${LIB_NAME_UPPER}_INSTALL_DIRECTORY_FOUND TRUE)
    else()
        set(${LIB_NAME_UPPER}_INSTALL_DIRECTORY_FOUND FALSE)
    endif()
endmacro()

# 编译库
macro(build_external_lib lib_name)
    message("\n=========================BUILD LIB BEGIN=========================")
    define_external_lib_variable(${lib_name})
    if (MSVC)
        list(APPEND ${LIB_NAME_UPPER}_BUILD_CONFIG -DCMAKE_CONFIGURATION_TYPES=${${LIB_NAME_UPPER}_BUILD_TYPE})
    else()
        list(APPEND ${LIB_NAME_UPPER}_BUILD_CONFIG -DCMAKE_BUILD_TYPE=${${LIB_NAME_UPPER}_BUILD_TYPE})
    endif()

    find_install_directory()
    if (EMSCRIPTEN)
        if (NOT ${${LIB_NAME_UPPER}_INSTALL_DIRECTORY_FOUND} AND ${LIB_NAME_UPPER}_AUTO_BUILD)
            execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory ${${LIB_NAME_UPPER}_BUILD_DIR})
            # configure 
            execute_process(COMMAND emcmake cmake
                -S ${${LIB_NAME_UPPER}_CMAKE_DIR} 
                -B ${${LIB_NAME_UPPER}_BUILD_DIR} 
                -DCMAKE_INSTALL_PREFIX=${${LIB_NAME_UPPER}_INSTALL_DIRECTORY} 
                ${${LIB_NAME_UPPER}_BUILD_CONFIG}
            )
            # build
            execute_process(COMMAND emmake make -C ${${LIB_NAME_UPPER}_BUILD_DIR})
            # install
            execute_process(COMMAND emmake make -C ${${LIB_NAME_UPPER}_BUILD_DIR} install)
            if (NOT EXISTS ${${LIB_NAME_UPPER}_INSTALL_DIRECTORY})
	            message(FATAL_ERROR "LIB INSTALL FAILED!!!")
            endif()
        endif()
    else()
        # find_package(${LIB_NAME} CONFIG PATHS ${${LIB_NAME_UPPER}_INSTALL_DIRECTORY} NO_DEFAULT_PATH)
        if (NOT ${${LIB_NAME_UPPER}_INSTALL_DIRECTORY_FOUND} AND ${LIB_NAME_UPPER}_AUTO_BUILD)
            execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory ${${LIB_NAME_UPPER}_BUILD_DIR})
            execute_process(COMMAND ${CMAKE_COMMAND} 
                -S ${${LIB_NAME_UPPER}_CMAKE_DIR} 
                -B ${${LIB_NAME_UPPER}_BUILD_DIR} 
                -DCMAKE_INSTALL_PREFIX=${${LIB_NAME_UPPER}_INSTALL_DIRECTORY} 
                ${${LIB_NAME_UPPER}_BUILD_CONFIG}
            )
            if (MSVC) 
                execute_process(COMMAND ${CMAKE_COMMAND} --build ${${LIB_NAME_UPPER}_BUILD_DIR} --config ${${LIB_NAME_UPPER}_BUILD_TYPE})
            else()
                execute_process(COMMAND ${CMAKE_COMMAND} --build ${${LIB_NAME_UPPER}_BUILD_DIR})
            endif()
            execute_process(COMMAND ${CMAKE_COMMAND} --install ${${LIB_NAME_UPPER}_BUILD_DIR} --config ${${LIB_NAME_UPPER}_BUILD_TYPE})
            # find_package(${LIB_NAME} CONFIG REQUIRED PATHS ${${LIB_NAME_UPPER}_INSTALL_DIRECTORY} NO_DEFAULT_PATH)
        endif()
    endif()

    find_install_directory()
    if (${${LIB_NAME_UPPER}_INSTALL_DIRECTORY_FOUND}) 
        add_library(${${LIB_NAME_UPPER}_INTERFACE_NAME} INTERFACE)
        target_include_directories(${${LIB_NAME_UPPER}_INTERFACE_NAME} INTERFACE ${${LIB_NAME_UPPER}_INTERFACE_INCLUDE_DIR})
        target_link_libraries(${${LIB_NAME_UPPER}_INTERFACE_NAME} INTERFACE ${${LIB_NAME_UPPER}_INTERFACE_LIBRARY})
        target_compile_definitions(${${LIB_NAME_UPPER}_INTERFACE_NAME} INTERFACE ${${LIB_NAME_UPPER}_INTERFACE_MACRO_DEFINITIONS})
    endif()
    print_external_lib_variable(${lib_name})
    message("=========================BUILD LIB END=========================")
endmacro(build_external_lib)

macro(add_3dparty_library target_name lib_name)
    string(TOLOWER "${lib_name}" LIB_NAME_LOWER)
    # if(NOT TARGET ${LIB_NAME_LOWER})
    #     include("${LIB_NAME_LOWER}")
    # endif()
    target_link_libraries(${target_name} PUBLIC ${LIB_NAME_LOWER}_interface)
endmacro(add_3dparty_library)